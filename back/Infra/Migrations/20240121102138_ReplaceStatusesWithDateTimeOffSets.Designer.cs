// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dnd_infra;

#nullable disable

namespace dnd_infra.Migrations
{
    [DbContext(typeof(GlobalDbContext))]
    [Migration("20240121102138_ReplaceStatusesWithDateTimeOffSets")]
    partial class ReplaceStatusesWithDateTimeOffSets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.AdventureDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Adventures", "Campaigns");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.RoomDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdventureId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsStartRoom")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("Rooms", "Campaigns");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.PositionDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SquareId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SquareId")
                        .IsUnique();

                    b.ToTable("Positions", "Campaigns");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("HasBottomWall")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLeftWall")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLockedChest")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasOpenedChest")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPillar")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasRightWall")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTopWall")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDoor")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Squares", "Campaigns");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareTrapDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SquareId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SquareId")
                        .IsUnique();

                    b.ToTable("SquareTraps", "Campaigns");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.CampaignDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Campaigns", "Campaigns");
                });

            modelBuilder.Entity("dnd_infra.Dice.DieAssociationDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtefactId")
                        .HasColumnType("int");

                    b.Property<int?>("ChestTrapId")
                        .HasColumnType("int");

                    b.Property<string>("DieType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PotionId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponSuperAttackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtefactId");

                    b.HasIndex("ChestTrapId");

                    b.HasIndex("PotionId");

                    b.HasIndex("SpellId");

                    b.HasIndex("WeaponId");

                    b.HasIndex("WeaponSuperAttackId");

                    b.ToTable("DieAssociations", "Dice");
                });

            modelBuilder.Entity("dnd_infra.GameFlow.DALs.CurrentPlayerDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdventureId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("CurrentPlayers", "GameFlow");
                });

            modelBuilder.Entity("dnd_infra.GameFlow.DALs.TurnOrderDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdventureId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("TurnOrders", "GameFlow");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ArtefactDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CastDieToDiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StarDieEffect")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artefacts", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ArtefactEffectDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtefactId")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtefactId");

                    b.ToTable("ArtefactEffects", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ChestTrapDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CastDieToDiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StarDieEffect")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChestTraps", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ChestTrapEffectDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChestTrapId")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChestTrapId");

                    b.ToTable("ChestTrapEffects", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.PotionDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CastDieToDiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StarDieEffect")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Potions", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.PotionEffectDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PotionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PotionId");

                    b.ToTable("PotionEffects", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.SpellDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CastDieToDiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDistantSpell")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeleeSpell")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("ManaCost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StarDieEffect")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Spells", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.SpellEffectDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellEffects", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.StoredItemDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtefactId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiscarded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEquiped")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("PotionId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtefactId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PotionId");

                    b.HasIndex("SpellId");

                    b.HasIndex("WeaponId");

                    b.ToTable("StoredItems", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanRerollOneDie")
                        .HasColumnType("bit");

                    b.Property<bool?>("CastDieToDiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DiscardAfterUsage")
                        .HasColumnType("bit");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StarDieEffect")
                        .HasColumnType("int");

                    b.Property<int?>("SuperAttackId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SuperAttackId");

                    b.ToTable("Weapons", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponEffectDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId");

                    b.ToTable("WeaponEffects", "Items");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponSuperAttackDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("LosesWeaponAfterSuperAttack")
                        .HasColumnType("bit");

                    b.Property<bool?>("LosesWeaponIfStarDieReturnsStar")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId")
                        .IsUnique();

                    b.ToTable("WeaponSuperAttacks", "Items");
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerAttributesDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackCount")
                        .HasColumnType("int");

                    b.Property<int>("ChestSearchCount")
                        .HasColumnType("int");

                    b.Property<int>("FootSteps")
                        .HasColumnType("int");

                    b.Property<int>("HealCount")
                        .HasColumnType("int");

                    b.Property<int>("LifePoints")
                        .HasColumnType("int");

                    b.Property<int>("ManaPoints")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Shield")
                        .HasColumnType("int");

                    b.Property<int>("TrapSearchCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerAttributes", "Players");
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDead")
                        .HasColumnType("bit");

                    b.Property<int?>("SquareId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("SquareId")
                        .IsUnique()
                        .HasFilter("[SquareId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Players", "Players");
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerMaxAttributesDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxAttackCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxChestSearchCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxFootSteps")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxLifePoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxManaPoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxShield")
                        .HasColumnType("int");

                    b.Property<int>("MaxTrapSearchCount")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerMaxAttributes", "Players");
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerProfileDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonsterType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerProfiles", "Players");
                });

            modelBuilder.Entity("dnd_infra.Users.UserDal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "Users");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.AdventureDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.CampaignDal", null)
                        .WithMany("Adventures")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.RoomDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.Adventures.AdventureDal", null)
                        .WithMany("Rooms")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.PositionDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareDal", null)
                        .WithOne("Position")
                        .HasForeignKey("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.PositionDal", "SquareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.Adventures.Rooms.RoomDal", null)
                        .WithMany("Squares")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareTrapDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareDal", null)
                        .WithOne("Trap")
                        .HasForeignKey("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareTrapDal", "SquareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Dice.DieAssociationDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.ArtefactDal", null)
                        .WithMany()
                        .HasForeignKey("ArtefactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Items.DALs.ChestTrapDal", null)
                        .WithMany()
                        .HasForeignKey("ChestTrapId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Items.DALs.PotionDal", null)
                        .WithMany()
                        .HasForeignKey("PotionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Items.DALs.SpellDal", null)
                        .WithMany("Dice")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Items.DALs.WeaponDal", null)
                        .WithMany("Dice")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Items.DALs.WeaponSuperAttackDal", null)
                        .WithMany("Dice")
                        .HasForeignKey("WeaponSuperAttackId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("dnd_infra.GameFlow.DALs.CurrentPlayerDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.Adventures.AdventureDal", null)
                        .WithMany()
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dnd_infra.Players.DALs.PlayerDal", "Player")
                        .WithOne()
                        .HasForeignKey("dnd_infra.GameFlow.DALs.CurrentPlayerDal", "PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dnd_infra.GameFlow.DALs.TurnOrderDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.Adventures.AdventureDal", null)
                        .WithMany()
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dnd_infra.Players.DALs.PlayerDal", null)
                        .WithOne("TurnOrder")
                        .HasForeignKey("dnd_infra.GameFlow.DALs.TurnOrderDal", "PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ArtefactEffectDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.ArtefactDal", null)
                        .WithMany("Effects")
                        .HasForeignKey("ArtefactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ChestTrapEffectDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.ChestTrapDal", null)
                        .WithMany("Effects")
                        .HasForeignKey("ChestTrapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.PotionEffectDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.PotionDal", null)
                        .WithMany("Effects")
                        .HasForeignKey("PotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.SpellEffectDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.SpellDal", null)
                        .WithMany("Effects")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.StoredItemDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.ArtefactDal", "Artefact")
                        .WithMany()
                        .HasForeignKey("ArtefactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Players.DALs.PlayerDal", null)
                        .WithMany("StoredItems")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dnd_infra.Items.DALs.PotionDal", "Potion")
                        .WithMany()
                        .HasForeignKey("PotionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Items.DALs.SpellDal", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Items.DALs.WeaponDal", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Artefact");

                    b.Navigation("Potion");

                    b.Navigation("Spell");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.WeaponSuperAttackDal", "SuperAttack")
                        .WithMany()
                        .HasForeignKey("SuperAttackId");

                    b.Navigation("SuperAttack");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponEffectDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.WeaponDal", null)
                        .WithMany("Effects")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponSuperAttackDal", b =>
                {
                    b.HasOne("dnd_infra.Items.DALs.WeaponDal", null)
                        .WithOne()
                        .HasForeignKey("dnd_infra.Items.DALs.WeaponSuperAttackDal", "WeaponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerAttributesDal", b =>
                {
                    b.HasOne("dnd_infra.Players.DALs.PlayerDal", null)
                        .WithOne("Attributes")
                        .HasForeignKey("dnd_infra.Players.DALs.PlayerAttributesDal", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerDal", b =>
                {
                    b.HasOne("dnd_infra.Campaigns.CampaignDal", null)
                        .WithMany("Players")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareDal", "Square")
                        .WithOne()
                        .HasForeignKey("dnd_infra.Players.DALs.PlayerDal", "SquareId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dnd_infra.Users.UserDal", null)
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Square");
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerMaxAttributesDal", b =>
                {
                    b.HasOne("dnd_infra.Players.DALs.PlayerDal", null)
                        .WithOne("MaxAttributes")
                        .HasForeignKey("dnd_infra.Players.DALs.PlayerMaxAttributesDal", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerProfileDal", b =>
                {
                    b.HasOne("dnd_infra.Players.DALs.PlayerDal", null)
                        .WithOne("Profile")
                        .HasForeignKey("dnd_infra.Players.DALs.PlayerProfileDal", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.AdventureDal", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.RoomDal", b =>
                {
                    b.Navigation("Squares");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.Adventures.Rooms.Squares.DALs.SquareDal", b =>
                {
                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Trap");
                });

            modelBuilder.Entity("dnd_infra.Campaigns.CampaignDal", b =>
                {
                    b.Navigation("Adventures");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ArtefactDal", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.ChestTrapDal", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.PotionDal", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.SpellDal", b =>
                {
                    b.Navigation("Dice");

                    b.Navigation("Effects");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponDal", b =>
                {
                    b.Navigation("Dice");

                    b.Navigation("Effects");
                });

            modelBuilder.Entity("dnd_infra.Items.DALs.WeaponSuperAttackDal", b =>
                {
                    b.Navigation("Dice");
                });

            modelBuilder.Entity("dnd_infra.Players.DALs.PlayerDal", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("MaxAttributes")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("StoredItems");

                    b.Navigation("TurnOrder");
                });

            modelBuilder.Entity("dnd_infra.Users.UserDal", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
